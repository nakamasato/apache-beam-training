/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package apachebeamtraining;

import java.util.Date;
import java.util.Iterator;
import org.apache.beam.examples.common.WriteOneFilePerWindow;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.gcp.pubsub.PubsubIO;
import org.apache.beam.sdk.options.Default;
import org.apache.beam.sdk.options.Description;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.options.StreamingOptions;
import org.apache.beam.sdk.options.Validation.Required;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.windowing.FixedWindows;
import org.apache.beam.sdk.transforms.windowing.Window;
import org.apache.beam.sdk.values.KV;
import org.apache.beam.sdk.values.PCollection;
import org.joda.time.Duration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {

  private static Logger logger = LoggerFactory.getLogger(App.class);

  /*
   * Extract 5th field of the input text.
   */
  public static class ExtractAmountFromRowFn extends DoFn<String, String> {
    @ProcessElement
    public void process(ProcessContext c) {

      try {
        String row = c.element();

        String[] cells = row.split(",");

        c.output(cells[4]);
      } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        logger.error("Failed to process data", e);
      }
    }
  }

  /**
   * T -> String
   */
  static class ConvertToStringFn<T> extends DoFn<T, String> {
    @ProcessElement
    public void processElement(@Element T e, OutputReceiver<String> receiver) {
      receiver.output(e.toString());
    }
  }

  /*
   * String -> KV<String, Integer>
   */
  static class ConvertStringIntoKVFn extends DoFn<String, KV<String, Integer>> {
    @ProcessElement
    public void processElement(ProcessContext c) {
      String row = c.element();
      String[] cells = row.split(",");
      c.output(KV.of(cells[0], row.length()));
    }
  }

  /*
   * String -> KV<String, CryptoCurrency>
   */
  static class ConvertTextIntoKVCryptoCurrencyFn extends DoFn<String, KV<String, CryptoCurrency>> {
    @ProcessElement
    public void processElement(@Element String row,
        OutputReceiver<KV<String, CryptoCurrency>> receiver) {
      String[] cells = row.split(",");
      try {
        double amount = Double.parseDouble(cells[4]);
        receiver.output(KV.of(cells[0], new CryptoCurrency(cells[0], amount)));
      } catch (NumberFormatException ex) {
        logger.error("failed to convert to CryptoCurrency", ex);
      } catch (ArrayIndexOutOfBoundsException ex) {
        logger.error("failed to convert to CryptoCurrency", ex);
      }
    }
  }

  /*
   * Process item in a batch. Just count the number of item and return BatchResult as String.
   */
  static class ProcessBatch extends DoFn<KV<String, Iterable<CryptoCurrency>>, String> {
    @ProcessElement
    public void process(@Element KV<String, Iterable<CryptoCurrency>> batch,
        OutputReceiver<String> receiver) {
      int count = 0;
      Iterator<CryptoCurrency> iter = batch.getValue().iterator();
      while (iter.hasNext()) {
        count++;
        iter.next();
      }
      BatchResult batchResult =
          new BatchResult(batch.getKey(), count, new Date(System.currentTimeMillis()));
      receiver.output(batchResult.toString());
    }
  }

  /*
   * https://cloud.google.com/pubsub/docs/stream-messages-dataflow Define your own configuration
   * options. Add your own arguments to be processed by the command-line parser, and specify default
   * values for them.
   */
  public interface PubSubToGcsOptions extends PipelineOptions, StreamingOptions {
    @Description("The Cloud Pub/Sub subscription to read from.")
    @Required
    String getInputSubscription();

    void setInputSubscription(String value);

    @Description("Output file's window size in number of minutes.")
    @Default.Integer(1)
    Integer getWindowSize();

    void setWindowSize(Integer value);

    @Description("Path of the output file including its filename prefix.")
    @Required
    String getOutput();

    void setOutput(String value);
  }

  public static void main(String[] args) {

    // For local mode, you do not need to set the runner since DirectRunner is already the default.
    PubSubToGcsOptions options =
        PipelineOptionsFactory.fromArgs(args).withValidation().as(PubSubToGcsOptions.class);

    options.setStreaming(true);

    Pipeline p = Pipeline.create(options);

    // Input: read from PubSub
    PCollection<String> textData = p.apply("Read PubSub Message",
        PubsubIO.readStrings().fromSubscription(options.getInputSubscription()));

    // Make a Window
    PCollection<String> windowedTextData =
        textData.apply(Window.into(FixedWindows.of(Duration.standardMinutes(options.getWindowSize()))));

    // Write to file
    windowedTextData.apply("Write Files to GCS", new WriteOneFilePerWindow(options.getOutput(), 1));

    p.run().waitUntilFinish();
  }
}
